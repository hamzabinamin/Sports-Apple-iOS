//
//  Goal.swift
//  MySampleApp
//
//
// Copyright 2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.21
//

import Foundation
import UIKit
import AWSDynamoDB

@objcMembers
class Goal: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var _userId: String?
    var _goalId: String?
    var _calories: NSNumber?
    var _date: String?
    var _distance: NSNumber?
    var _time: NSNumber?
    var _weight: NSNumber?
    var _yearlyGoal: String?
    var _exercise: [String:String]?
    
    class func dynamoDBTableName() -> String {

        return "sportsapple-mobilehub-1970899121-Goal"
    }
    
    class func hashKeyAttribute() -> String {

        return "_userId"
    }
    
    class func rangeKeyAttribute() -> String {

        return "_goalId"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
               "_userId" : "userId",
               "_goalId" : "goalId",
               "_calories" : "Calories",
               "_date" : "Date",
               "_distance" : "Distance",
               "_time" : "Time",
               "_weight" : "Weight",
               "_yearlyGoal" : "Yearly Goal",
               "_exercise" : "Exercise",
        ]
    }
    
    func createGoal(goalItem: Goal, completion: @escaping (_ success: String) -> Void) {
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        // Create data object using data models you downloaded from Mobile Hub
        
        //Save a new item
        dynamoDbObjectMapper.save(goalItem, completionHandler: {
            (error: Error?) -> Void in
            
            if let error = error {
                print(error.localizedDescription)
                completion(error.localizedDescription)
                return
            }
            print("success")
            completion("success")
        })
    }
    
    func queryGoal(userId: String, completion: @escaping (_ success: String, _ goalArray: [Goal]) -> Void) {
        var goalArray: [Goal] = []
        //let exercise: Exercise = Exercise()
        let queryExpression = AWSDynamoDBQueryExpression()
        queryExpression.keyConditionExpression = "#userId = :userId"
        
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
        ]
        queryExpression.expressionAttributeValues = [
            ":userId": userId
        ]
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        dynamoDbObjectMapper.query(Goal.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if error != nil {
                print("The request failed. Error: \(String(describing: error))")
                completion((error?.localizedDescription)!, [])
            }
            if output != nil {
                for goal in output!.items {
                    let goalItem = goal as? Goal
                    goalArray.append(goalItem!)
                }
                if goalArray.count > 0 {
                   /* for(index, element) in goalArray.enumerated() {
                        exercise.queryExercise(exerciseId: NSNumber(value: Int(element._exerciseId!)!), completion: { (response, responseExercise) in
                            
                            if response == "success" {
                                goalArray[index]._exerciseId = responseExercise
                                
                                if index == goalArray.count - 1 {
                                    print("Sending result now")
                                    completion("success", goalArray)
                                }
                            }
                            else {
                                completion(response, [])
                            }
                        })
                    } */
                    
                    completion("success", goalArray)
                }
                else {
                   completion("failure", [])
                }
            }
        }
    }
}
