//
//  Activity.swift
//  MySampleApp
//
//
// Copyright 2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.21
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSAuthCore

@objcMembers
class Activity: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var _userId: String?
    var _activityId: String?
    var _bodyWeight: NSNumber?
    var _calories: NSNumber?
    var _date: String?
    var _exerciseList: [[String: Any]]?
    var _location: String?
    var _workoutComment: String?
    
    class func dynamoDBTableName() -> String {

        return "sportsapple-mobilehub-1970899121-Activity"
    }
    
    class func hashKeyAttribute() -> String {

        return "_userId"
    }
    
    class func rangeKeyAttribute() -> String {

        return "_activityId"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
               "_userId" : "userId",
               "_activityId" : "activityId",
               "_bodyWeight" : "Body Weight",
               "_calories" : "Calories",
               "_date" : "Date",
               "_exerciseList" : "Exercise List",
               "_location" : "Location",
               "_workoutComment" : "Workout Comment",
        ]
    }
    
    func createActivity(activityItem: Activity, completion: @escaping (_ success: String) -> Void) {
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        // Create data object using data models you downloaded from Mobile Hub
       
        //Save a new item
        dynamoDbObjectMapper.save(activityItem, completionHandler: {
            (error: Error?) -> Void in
            
            if let error = error {
                print("Amazon DynamoDB Save Error: \(error)")
                completion(error.localizedDescription)
            }
            else {
                print("An item was saved.")
                completion("success")
            }
        })
    }
    
    /* let data = JSON([
     "exerciseID": 3,
     "Weight Amount": 55,
     "Reps": 145,
     "Sets": 132,
     "Count": 111,
     "Time": 0,
     "Distance": 0,
     "Exercise Comment": "newest"]
     ) */
    
    
    func getActivity() {
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        // Create data object using data models you downloaded from Mobile Hub
        let activityItem: Activity = Activity();
        activityItem._userId = AWSIdentityManager.default().identityId
        
        dynamoDbObjectMapper.load(
            Activity.self,
            hashKey: activityItem._userId!,
            rangeKey: "YourArticleId",
            completionHandler: {
                (objectModel: AWSDynamoDBObjectModel?, error: Error?) -> Void in
                if let error = error {
                    print("Amazon DynamoDB Read Error: \(error)")
                    return
                }
                print("An item was read.")
        })
    }
    
    func queryActivity(userId: String, date: String, completion: @escaping (_ success: String, _ sessionArray: [Activity]) -> Void) {
        var sessionArray: [Activity] = []
        let queryExpression = AWSDynamoDBQueryExpression()
       // queryExpression.indexName = "UserActivityDate"
        queryExpression.keyConditionExpression = "#userId = :userId"
        queryExpression.filterExpression = "contains(#Date, :Date)"
        
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
            "#Date": "Date",
        ]
        queryExpression.expressionAttributeValues = [
            ":Date": date,
            ":userId": userId,
        ]
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        dynamoDbObjectMapper.query(Activity.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if error != nil {
                print("The request failed. Error: \(String(describing: error))")
                completion((error?.localizedDescription)!, sessionArray)
            }
            if output != nil {
                for activity in output!.items {
                    let activityItem = activity as? Activity
                    sessionArray.append(activityItem!)
                }
                if sessionArray.count > 0 {
                    completion("success", sessionArray)
                }
                else {
                    completion("no result", sessionArray)
                }
            }
            else {
                completion("no result", sessionArray)
            }
        }
    }
    
    func queryActivityInRange(userId: String, date1: String, date2: String, completion: @escaping (_ success: String, _ sessionArray: [Activity]) -> Void) {
        var sessionArray: [Activity] = []
        let queryExpression = AWSDynamoDBQueryExpression()
        // queryExpression.indexName = "UserActivityDate"
        queryExpression.keyConditionExpression = "#userId = :userId"
        queryExpression.filterExpression = "#Date BETWEEN :date1 AND :date2"
        
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
            "#Date": "Date",
        ]
        queryExpression.expressionAttributeValues = [
            ":userId": userId,
            ":date1": date1,
            ":date2": date2
        ]
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        dynamoDbObjectMapper.query(Activity.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if error != nil {
                print("The request failed. Error: \(String(describing: error))")
                completion((error?.localizedDescription)!, sessionArray)
            }
            if output != nil {
                for activity in output!.items {
                    let activityItem = activity as? Activity
                    sessionArray.append(activityItem!)
                }
                if sessionArray.count > 0 {
                    completion("success", sessionArray)
                }
                else {
                    completion("no result", sessionArray)
                }
            }
            else {
                completion("no result", sessionArray)
            }
        }
    }
    
    func queryActivity(userId: String, completion: @escaping (_ success: String, _ sessionArray: [Activity]) -> Void) {
        var sessionArray: [Activity] = []
        let queryExpression = AWSDynamoDBQueryExpression()
        // queryExpression.indexName = "UserActivityDate"
        queryExpression.keyConditionExpression = "#userId = :userId"
        
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
        ]
        queryExpression.expressionAttributeValues = [
            ":userId": userId,
        ]
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        
        dynamoDbObjectMapper.query(Activity.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if error != nil {
                print("The request failed. Error: \(String(describing: error))")
                completion((error?.localizedDescription)!, sessionArray)
            }
            if output != nil {
                for activity in output!.items {
                    let activityItem = activity as? Activity
                    sessionArray.append(activityItem!)
                }
                if sessionArray.count > 0 {
                    completion("success", sessionArray)
                }
                else {
                    completion("no result", sessionArray)
                }
            }
            else {
                completion("no result", sessionArray)
            }
        }
    }
    
    func deleteActivity(activityItem: Activity, completion: @escaping (_ success: String) -> Void) {
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        // Create data object using data models you downloaded from Mobile Hub
        
        //Save a new item
        dynamoDbObjectMapper.remove(activityItem, completionHandler: {
            (error: Error?) -> Void in
            
            if let error = error {
                print("Amazon DynamoDB Save Error: \(error)")
                completion(error.localizedDescription)
            }
            print("An item was saved.")
            completion("success")
        })
    }
}
